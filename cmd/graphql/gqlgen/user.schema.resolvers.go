package gqlgen

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.56

import (
	"context"

	"github.com/google/uuid"
	"github.com/lincolnjpg/investment_service/internal/dtos"
	customerror "github.com/lincolnjpg/investment_service/internal/error"
)

func (r *mutationResolver) CreateUser(ctx context.Context, input dtos.CreateUserInput) (*dtos.CreateUserOutput, error) {
	user, err := r.Resolver.UserService.CreateUser(ctx, dtos.CreateUserInput{Name: input.Name, InvestorProfile: input.InvestorProfile})
	if err != nil {
		err, _ := err.(customerror.APIError)
		return &dtos.CreateUserOutput{}, err.Err
	}

	return &user, nil
}

func (r *mutationResolver) UpdateUserByID(ctx context.Context, input dtos.UpdateUserInput) (*dtos.UpdateUserOutput, error) {
	user, err := r.Resolver.UserService.UpdateUserById(ctx, dtos.UpdateUserInput{Id: input.Id, Name: input.Name, InvestorProfile: input.InvestorProfile})
	if err != nil {
		err, _ := err.(customerror.APIError)
		return &dtos.UpdateUserOutput{}, err.Err
	}

	return &user, nil
}

func (r *mutationResolver) DeleteUserByID(ctx context.Context, input dtos.DeleteUserByIdInput) (uuid.UUID, error) {
	err := r.Resolver.UserService.DeleteUserById(ctx, dtos.DeleteUserByIdInput{Id: input.Id})
	if err != nil {
		err, _ := err.(customerror.APIError)
		return uuid.Nil, err.Err
	}

	return input.Id, nil
}

func (r *queryResolver) GetUserByID(ctx context.Context, input dtos.GetUserByIdInput) (*dtos.GetUserByIdOutput, error) {
	user, err := r.Resolver.UserService.GetUserById(context.Background(), input)
	if err != nil {
		err, _ := err.(customerror.APIError)
		return nil, err.Err
	}

	return &user, nil
}

func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

type mutationResolver struct{ *Resolver }
